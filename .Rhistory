#'
#' @return index of inverted values
#' @export
#'
checkInvertedLatitudeLongitude <- function(lat,lon, latzone = c(-90,90),longzone = c(-180,180)){
if((min(longzone) < -180) | (max(longzone) > 180)){
cat("Longitude range is wrong!")
return(-1)
}
if((min(latzone) < -90) | (max(latzone) > 90)){
cat("Latitude range is wrong!")
return(-1)
}
out_lon = which(((lon >= min(latzone)) & (lon <= max(latzone)))&((lat >= min(longzone)) & (lat <= max(longzone))))
return(out_lon)
}
#' Check If Longitude and Latitude Are Simultaneously out of range
#'
#' @param lat latitude
#' @param lon longitude
#' @param latzone range of valid latitudes
#' @param longzone range of valid longitudes
#'
#' @return index of abnormal values
#' @export
#'
checkSimulaneousOutOfRange <- function(lat,lon, latzone = c(-90,90),longzone = c(-180,180)){
if((min(longzone) < -180) | (max(longzone) > 180)){
cat("Longitude range is wrong!")
return(-1)
}
if((min(latzone) < -90) | (max(latzone) > 90)){
cat("Latitude range is wrong!")
return(-1)
}
out_lon = which(((lon < min(longzone)) | (lon > max(longzone)))&((lat < min(latzone)) & (lat > max(latzone))))
return(out_lon)
}
#' Convert DateTime To Chron
#'
#' @param date date value
#' @param time time value
#' @return chron datetime value
#'
#' @export
#'
dateTimeConverter <- function(date,time){
data_frm <- c(dates = "y-m-d", times = "h:m:s")
dt=as.numeric(chron::chron(as.character(date), as.character(time), data_frm))
return(dt)
}
#' Knots/h to Km/h
#'
#' @param speed speed in knots per hour
#' @return speed in kilometer per hour
#'
#' @export
#'
kno2kmh <- function(speed) {
speed <- speed * 1.852
return(speed)
}
#' Last Index Of
#'
#' @param string a string to be checked
#' @param character a character that we look for
#' @description returns the last index of a character in a string.
#' @return index
#'
lastIndexOf <- function(string, character){
return(regexpr(paste0("\\",character,"[^\\",character,"]*$"), string)[1])
}
#' Extract File Name
#'
#' @param file complete path with name of file
#' @return file name
#' @description Extract the file name from a path
#' @export
#'
get_file_name <- function(file){
filename = basename(file)
n = lastIndexOf(filename,".")
return(stringr::str_sub(string = filename,start = 1,end = n-1))
}
#' Extract File Directory
#'
#' @param file complete path with name of file
#' @return
#' @description Extract the file directory from a path
#' @export
#'
get_file_path <- function(file){
return(dirname(file))
}
# CHECK AND REMOVE MISSING VALUES IN LATITUDE
na_lat = checkMissing(rawvms[,si_lati])
cat("\n  -  ",length(na_lat)," NAs found in Latitude.")
if(length(na_lat) > 0){
rawvms = rawvms[-na_lat,]
vmsdata = vmsdata[-na_lat,]
}
# CHECK AND REMOVE OUT OF RANGE VALUES IN LATITUDE
out_lat = checkLatitude(rawvms[,si_lati])
cat("\n  -  ",length(out_lat)," Latitudes out of range [-90, 90].")
if(length(out_lat) > 0){
rawvms = rawvms[-out_lat,]
vmsdata = vmsdata[-out_lat,]
}
out_lat = checkLatitude(rawvms[,si_lati],minmax = latzone)
cat("\n  -  ",length(out_lat)," Latitudes out of range [",latzone[1],",", latzone[2],"].")
vmsdata[, "LAT"] = rawvms[,si_lati]
# CHECK AND REMOVE MISSING VALUES IN LONGITUDE
na_lon = checkMissing(rawvms[,si_long])
cat("\n  -  ",length(na_lon)," NAs found in Longitude")
if(length(na_lon) > 0){
rawvms = rawvms[-na_lon,]
vmsdata = vmsdata[-na_lon,]
}
# CHECK AND REMOVE OUT OF RANGE VALUES IN LONGITUDE
out_lon = checkLongitude(rawvms[,si_long])
cat("\n  -  ",length(out_lon)," Longitudes out of range [-180, 180].")
if(length(out_lon) > 0){
rawvms = rawvms[-out_lon,]
vmsdata = vmsdata[-out_lon,]
}
out_lon = checkLongitude(rawvms[,si_long],minmax = longzone)
cat("\n  -  ",length(out_lon)," Longitudes out of range [",longzone[1],",", longzone[2],"].")
vmsdata[, "LON"] = rawvms[,si_long]
# CHECK INVERTED LATITUDE LONGITUDE VALUES
out_lon = checkInvertedLatitudeLongitude(rawvms[,si_lati],rawvms[,si_long], latzone = latzone,longzone = longzone)
cat("\n  -  ",length(out_lon)," Inverted Latitude Longitude")
rawvms[,si_lati]
# CHECK INVERTED LATITUDE LONGITUDE VALUES
out_lon = checkInvertedLatitudeLongitude(rawvms[,si_lati],rawvms[,si_long], latzone = latzone,longzone = longzone)
cat("\n  -  ",length(out_lon)," Inverted Latitude Longitude")
# CHECK SIMULANEOUS OUT OF RANGE COORDINATES
both_out = checkSimulaneousOutOfRange(rawvms[,si_lati],rawvms[,si_long], latzone =latzone,longzone = longzone)
cat("\n  -  ",length(both_out)," both Latitudes and Longitudes are out of range \n\t\t[",longzone[1],",", longzone[2],"] for longitude and \n\t\t[",latzone[1],",", latzone[2],"] for latitude")
# CHECK AND REMOVE MISSING VALUES IN DATE
na_date = checkMissing(rawvms[,si_date])
cat("\n  -  ",length(na_date)," NAs found in Date")
if(length(na_date) > 0){
rawvms = rawvms[-na_date,]
vmsdata = vmsdata[-na_date,]
}
# CHECK AND REMOVE MISSING VALUES IN TIME
na_time = checkMissing(rawvms[,si_time])
cat("\n  -  ",length(na_time)," NAs found in Time")
if(length(na_time) > 0){
rawvms = rawvms[-na_time,]
vmsdata = vmsdata[-na_time,]
}
dateTimeConverter(rawvms[,si_date],rawvms[,si_time])
?chron::chron
dateTimeConverter(rawvms[,si_date],rawvms[,si_time])
library(rmv)
vms_tacsat_file = "data/vms.csv"
library(rmv)
vms_edit_raw(vms_tacsat_file = "data/vms.csv",latzone = c(20,30))
library(rmv)
vms_edit_raw(vms_tacsat_file = "data/vms.csv",latzone = c(20,30))
usethis::use_r(name = "vms_create_db")
usethis::use_test()
vms_edit_raw(vms_tacsat_file = "data/vms.csv")
library(rmv)
library(rmv)
library(rmv)
library(rmv)
vms_create_db(vms_file = "data/vms.vms")
usethis::use_r(name = "vms_clean_db")
usethis::use_test()
source("~/INTELLIGENTICA/INTELLIGENTICA-PROJECTS/INRH/Big Data Fish Assessment/rmv/R/vms_clean_db.R", echo=TRUE)
vms_db_path = "data/vms_vms.sqlite"
map_file_path = "data/maps/CarteMar/tcote_maroc.shp"
harb_file_path = "data/maps/PortsSites/ports_sites_Project.shp"
inHarbBuff = 5.55
usethis::use_package(package = "rgdal",type = "Depends")
## READING HARBOR SHAPEFILE
harb_data <- rgdal::readOGR(harb_file_path,verbose = F)
XCOORD <- harb_data@coords[,1]
YCOORD <- harb_data@coords[,2]
## ADDING LAS PALMAS PORT
XCOORD = c(XCOORD,-15.4167)
YCOORD = c(YCOORD,28.1500)
## READING MAP SHAPEFILE
themap_data <- rgdal::readOGR(map_file_path,verbose = F)
## CONNECT TO THE DATABASE
conn = dbConnect(RSQLite::SQLite(), vms_db_path)
## IF THERE IS A TABLE CALLED WARN EXIST DROP IT AND CREATE A NEW ONE
dbExecute(conn, "DROP TABLE IF EXISTS warn")
dbExecute(conn, "CREATE TABLE warn(p_id INT, W_DUPL INT, W_HARB INT, W_LAND INT, W_COHE INT)")
cat("\n\n   ---   Ping Cleaning Started   ---\n")
## SELECT DISTINCT VESSEL IDS
incee = dbGetQuery(conn, 'select distinct I_NCEE from ping')
i=1
cat("\nVessel: ", i, " of ", nrow(incee), spe = "")
## SELECT ROWID AND ALL COLUMNS OF THE CURRENT VESSEL
vessel <- dbGetQuery(conn, paste0("select ROWID, * from ping where I_NCEE = '",incee[i,1],"' order by DATE"))
numlines <- nrow(vessel)
cat(" with ", numlines, " pings", sep = "")
View(vessel)
ann_data <- data.frame(
"p_id" = numeric(numlines),
"W_DUPL" = NA,
"W_HARB" = NA,
"W_LAND" = NA,
"W_COHE" = integer(numlines)
)
ann_data["p_id"] <- vessel["rowid"]
View(ann_data)
vessel[, 2:7]
View(vessel)
dupl <- duplicated(vessel[, 2:7])
sum(dupl)
hdist = lapply(1:numlines, function(x){
spDistsN1(pts = cbind(XCOORD, YCOORD), pt = as.matrix(c(vessel[x, "LON"], vessel[x, "LAT"])),longlat = TRUE)})
usethis::use_package(package = "sp",type = "Depends")
hdist = lapply(1:numlines, function(x){
sp::spDistsN1(pts = cbind(XCOORD, YCOORD), pt = as.matrix(c(vessel[x, "LON"], vessel[x, "LAT"])),longlat = TRUE)})
View(hdist)
hdist = lapply(1:numlines, function(x){
sp::spDistsN1(pts = cbind(XCOORD, YCOORD), pt = as.matrix(c(vessel[x, "LON"], vessel[x, "LAT"])),longlat = TRUE)}) %>% unlist()
hdist
hdist = lapply(1:numlines, function(x){
sp::spDistsN1(pts = cbind(XCOORD, YCOORD), pt = as.matrix(c(vessel[x, "LON"], vessel[x, "LAT"])),longlat = TRUE)}) %>% unlist() %>% min()
lapply(1:numlines, function(x){
sp::spDistsN1(pts = cbind(XCOORD, YCOORD), pt = as.matrix(c(vessel[x, "LON"], vessel[x, "LAT"])),longlat = TRUE)}) %>%
lapply(min) %>%
unlist
sp::spDistsN1(pts = cbind(XCOORD, YCOORD), pt = as.matrix(c(vessel[1, "LON"], vessel[1, "LAT"])),longlat = TRUE)})
sp::spDistsN1(pts = cbind(XCOORD, YCOORD), pt = as.matrix(c(vessel[1, "LON"], vessel[1, "LAT"])),longlat = TRUE)
?sp::spDistsN1
sp::spDistsN1(pts = cbind(XCOORD, YCOORD), pt = as.matrix(c(vessel[1, "LON"], vessel[1, "LAT"])),longlat = TRUE) %>% min()
lapply(1:numlines, function(j){
sp::spDistsN1(pts = cbind(XCOORD, YCOORD), pt = as.matrix(c(vessel[j, "LON"], vessel[j, "LAT"])),longlat = TRUE) %>%
min()
}) %>%
unlist
lapply(1:numlines, function(x){
ifelse(hdist[x] <= inHarbBuff,yes = 1, no = 0)
}) %>%
unlist
## CALCULATE THE MINIMAL DISTANCE AMONG ALL HARBORS
hdist = lapply(1:numlines, function(j){
sp::spDistsN1(pts = cbind(XCOORD, YCOORD), pt = as.matrix(c(vessel[j, "LON"], vessel[j, "LAT"])),longlat = TRUE) %>%
min()
}) %>%
unlist
## CHECK POINTS ON LAND
onland <- over(SpatialPoints(c(vessel["LON"], vessel["LAT"])), themap_data)
## CHECK POINTS ON LAND
onland <- sp::over(SpatialPoints(c(vessel["LON"], vessel["LAT"])), themap_data)
## CHECK POINTS ON LAND
onland <- sp::over(sp::SpatialPoints(c(vessel["LON"], vessel["LAT"])), themap_data)
land <- lapply(1:numlines, function(x){
ifelse(hdist[x]>3 & !is.na(onland[x,1]),yes = 1, no = 0)
}) %>%
unlist
## CHECK POINTS IN HARBOR
harb = lapply(1:numlines, function(x){
ifelse(hdist[x] <= inHarbBuff,yes = 1, no = 0)
}) %>%
unlist
harb
sum(harb)
cohe <- numeric(numlines)
j=1
succdist <- sp::spDists(matrix(c(vessel[j, "LON"], vessel[j, "LAT"]), ncol = 2),
matrix(c(vessel[j + 1, "LON"], vessel[j + 1, "LAT"]), ncol = 2),
longlat = TRUE)
succdist
View(vessel)
## CALCULATE THE LAG BETWEEN THE TWO SUCCESSIVE PINGS
succlag <- (vessel[j + 1, "DATE"] - vessel[j, "DATE"]) * 24
succlag
(vessel[j + 1, "DATE"] - vessel[j, "DATE"])
(vessel[j + 1, "DATE"] - vessel[j, "DATE"])*1440
#' Covert Chron Numeric Date Format to Date Time
#'
#' @param x numeric value of date
#'
#' @return Date Time
#' @export
#'
fromChronToDate <- function(x){
date = format(as.POSIXct((x) * 86400, origin = "1970-01-01", tz = "UTC"), "%m-%d-%Y %H:%M:%S")
return(date)
}
fromChronToDate(x =  vessel[j, "DATE"])
fromChronToDate(x =  vessel[j+1, "DATE"])
succdist
succlag
## CALCULATE THE VELOCITY BASED ON DISTANCE AND TIME BETWEEN THE TWO PINGS
succvel <- succdist / succlag
quantile(vessel$SPE)
j = 16509
## CALCULATE THE DISTANCE TO THE PREVIOUS PING
predist <- sp::spDists(matrix(c(vessel[j, "LON"], vessel[j, "LAT"]), ncol = 2),
matrix(c(vessel[j - 1, "LON"], vessel[j - 1, "LAT"]), ncol = 2),
longlat = TRUE)
predist
## CALCULATE THE LAG IN TIME TO THE PREVIOUS PING
prelag <- (vessel[j, "DATE"] - vessel[j - 1, "DATE"]) * 24
prelag
prevel <- predist / prelag
prevel
succdist <- spDists(matrix(c(vessel[j, "LON"], vessel[j, "LAT"]), ncol = 2),
matrix(c(vessel[j + 1, "LON"], vessel[j + 1, "LAT"]), ncol = 2),
longlat = TRUE)
succdist <- sp::spDists(matrix(c(vessel[j, "LON"], vessel[j, "LAT"]), ncol = 2),
matrix(c(vessel[j + 1, "LON"], vessel[j + 1, "LAT"]), ncol = 2),
longlat = TRUE)
library(rmv)
vms_clean_db(vms_db_path = "data/vms_vms.sqlite",map_file_path = "data/maps/CarteMar/tcote_maroc.shp",harb_file_path = "data/maps/PortsSites/ports_sites_Project.shp",inHarbBuff = 5)
library(rmv)
vms_clean_db(vms_db_path = "data/vms_vms.sqlite",map_file_path = "data/maps/CarteMar/tcote_maroc.shp",harb_file_path = "data/maps/PortsSites/ports_sites_Project.shp",inHarbBuff = 5)
library(rmv)
vms_clean_db(vms_db_path = "data/vms_vms.sqlite",map_file_path = "data/maps/CarteMar/tcote_maroc.shp",harb_file_path = "data/maps/PortsSites/ports_sites_Project.shp",inHarbBuff = 5)
vms_db_path = "data/vms_vms.sqlite"
map_file_path = "data/maps/CarteMar/tcote_maroc.shp"
harb_file_path = "data/maps/PortsSites/ports_sites_Project.shp"
inHarbBuff = 5
## READING HARBOR SHAPEFILE
harb_data <- rgdal::readOGR(harb_file_path,verbose = F)
XCOORD <- harb_data@coords[,1]
YCOORD <- harb_data@coords[,2]
## ADDING LAS PALMAS PORT
XCOORD = c(XCOORD,-15.4167)
YCOORD = c(YCOORD,28.1500)
## READING MAP SHAPEFILE
themap_data <- rgdal::readOGR(map_file_path,verbose = F)
## CONNECT TO THE DATABASE
conn = dbConnect(RSQLite::SQLite(), vms_db_path)
## IF THERE IS A TABLE CALLED WARN EXIST DROP IT AND CREATE A NEW ONE
dbExecute(conn, "DROP TABLE IF EXISTS warn")
dbExecute(conn, "CREATE TABLE warn(p_id INT, W_DUPL INT, W_HARB INT, W_LAND INT, W_COHE INT)")
cat("\n\n   ---   Ping Cleaning Started   ---\n")
## SELECT DISTINCT VESSEL IDS
incee = dbGetQuery(conn, 'select distinct I_NCEE from ping')
## LOOP OVER EACH VESSEL ID
for (i in 1:nrow(incee)){
cat("\nVessel: ", i, " of ", nrow(incee), spe = "")
## SELECT ROWID AND ALL COLUMNS OF THE CURRENT VESSEL
vessel <- dbGetQuery(conn, paste0("select ROWID, * from ping where I_NCEE = '",incee[i,1],"' order by DATE"))
numlines <- nrow(vessel)
max_speed <- max(vessel$SPE,na.rm = TRUE)
cat(" with ", numlines, " pings", sep = "")
if (numlines == 0) {
cat(" - Skipped!", sep = "")
next
}else{
ann_data <- data.frame(
"p_id" = numeric(numlines),
"W_DUPL" = NA,
"W_HARB" = NA,
"W_LAND" = NA,
"W_COHE" = integer(numlines)
)
ann_data["p_id"] <- vessel["rowid"]
## CHECK DUPLICATES
dupl <- duplicated(vessel[, 2:7])
## CALCULATE THE MINIMAL DISTANCE AMONG ALL HARBORS
hdist = lapply(1:numlines, function(j){
sp::spDistsN1(pts = cbind(XCOORD, YCOORD), pt = as.matrix(c(vessel[j, "LON"], vessel[j, "LAT"])),longlat = TRUE) %>%
min()
}) %>%
unlist
## CHECK POINTS ON LAND
onland <- sp::over(sp::SpatialPoints(c(vessel["LON"], vessel["LAT"])), themap_data)
land <- lapply(1:numlines, function(x){
ifelse(hdist[x]>3 & !is.na(onland[x,1]),yes = 1, no = 0)
}) %>%
unlist
## CHECK POINTS IN HARBOR
harb = lapply(1:numlines, function(x){
ifelse(hdist[x] <= inHarbBuff,yes = 1, no = 0)
}) %>%
unlist
cohe <- numeric(numlines)
## WE WILL GO PING BY PING AND SEE IF THE POINT IS IN HARBOR
for (j in 1:numlines){
# CHECK PINGS COHERENCE
if (j == 1) {   # IF IT IS THE FIST DATA POINT FOR THIS VESSEL
if (numlines > 1) {
if (!dupl[j+1]) { # IF THE NEXT DATA POINT IS NOT A DUPLICATED ONE DO:
## CALCULATE THE DISTANCE TO THE NEXT PING FOR THIS VESSEL
succdist <- sp::spDists(matrix(c(vessel[j, "LON"], vessel[j, "LAT"]), ncol = 2),
matrix(c(vessel[j + 1, "LON"], vessel[j + 1, "LAT"]), ncol = 2),
longlat = TRUE)
## CALCULATE THE LAG BETWEEN THE TWO SUCCESSIVE PINGS IN HOURS
succlag <- (vessel[j + 1, "DATE"] - vessel[j, "DATE"]) * 24
## IF THE DIFFERENCE IN TIME BETWEEN THE TWO SUCCESSIVE PINGS IS ZERO,
## TURN IT INTO 0.01 TO AVOIND DIVIDING BY ZERO
if (succlag == 0) {
succlag <- 0.01
}
## CALCULATE THE VELOCITY BASED ON DISTANCE AND TIME BETWEEN THE TWO PINGS
succvel <- succdist / succlag
ifelse(succvel < max_speed, cohe[j] <- 2, cohe[j] <- 0)
}else{ ## IF THIS NEXT PING IS MARKED AS A DUPLICATE
cohe[j] <- 2
}
}else{ ## IF (nrow(ann_data) == 1)
cohe[j] <- 3
}
next
}
## IF WE REACH THE LAST PING FOR THIS VESSEL
if (j == numlines) {
if (!dupl[j]) { ## IF IT IS NOT A DUPLICATE
## CALCULATE THE DISTANCE TO THE PREVIOUS PING
predist <- sp::spDists(matrix(c(vessel[j, "LON"], vessel[j, "LAT"]), ncol = 2),
matrix(c(vessel[j - 1, "LON"], vessel[j - 1, "LAT"]), ncol = 2),
longlat = TRUE)
## CALCULATE THE LAG IN TIME TO THE PREVIOUS PING
prelag <- (vessel[j, "DATE"] - vessel[j - 1, "DATE"]) * 24
if (prelag == 0) {
prelag <- 0.01
}
prevel <- predist / prelag
ifelse(prevel < max_speed, cohe[j] <- 1, cohe[j] <- 0)
}else{ ## IF IT IS A DUPLICATE
cohe[j] <- 1
}
next
}
## IF THE PING IS NOT THE FIRST OR THE LAST
if (j > 1 & j < numlines) {
## IF IT IS MARKED AS DUPLICATE
if (dupl[j]) {
## W_COHE WILL BE EQUAL THE PREVIOUS PING COHE
cohe[j] <- cohe[j-1]
next
}
## IF THE PREVIOUS PING IS A DUPLICATE
if (dupl[j-1]){
succdist <- sp::spDists(matrix(c(vessel[j, "LON"], vessel[j, "LAT"]), ncol = 2),
matrix(c(vessel[j + 1, "LON"], vessel[j + 1, "LAT"]), ncol = 2),
longlat = TRUE)
succlag <- (vessel[j + 1, "DATE"] - vessel[j, "DATE"]) * 24
if (succlag == 0) {
succlag <- 0.01
}
succvel <- succdist / succlag
ifelse(succvel < max_speed, cohe[j] <- 2, cohe[j] <- 0)
next
}
## IF THE NEXT PING IS A DUPLICATE
if (dupl[j+1]) {
predist <- sp::spDists(matrix(c(vessel[j, "LON"], vessel[j, "LAT"]), ncol = 2),
matrix(c(vessel[j - 1, "LON"], vessel[j - 1, "LAT"]), ncol = 2),
longlat = TRUE)
prelag <- (vessel[j, "DATE"] - vessel[j - 1, "DATE"]) * 24
if (prelag == 0) {
prelag <- 0.01
}
prevel <- predist / prelag
ifelse(prevel < max_speed, cohe[j] <- 1, cohe[j] <- 0)
next
}
succdist <- sp::spDists(matrix(c(vessel[j, "LON"], vessel[j, "LAT"]), ncol = 2),
matrix(c(vessel[j + 1, "LON"], vessel[j + 1, "LAT"]), ncol = 2),
longlat = TRUE)
succlag <- (vessel[j + 1, "DATE"] - vessel[j, "DATE"]) * 24
if (succlag == 0) {
succlag <- 0.01
}
succvel <- succdist / succlag
predist <- sp::spDists(matrix(c(vessel[j, "LON"], vessel[j, "LAT"]), ncol = 2),
matrix(c(vessel[j - 1, "LON"], vessel[j - 1, "LAT"]), ncol = 2),
longlat = TRUE)
prelag <- (vessel[j, "DATE"] - vessel[j - 1, "DATE"]) * 24
if (prelag == 0) {
prelag <- 0.01
}
prevel <- predist / prelag
if (prevel < max_speed) {
cohe[j] <- 1
}
if (succvel < max_speed) {
cohe[j] <- 2
}
if (prevel < max_speed & succvel < max_speed) {
cohe[j] <- 3
}
if (prevel > max_speed & succvel > max_speed) {
cohe[j] <- 0
}
}
}
cat(" - Completed!", sep = "")
ann_data$W_DUPL <- dupl
ann_data$W_HARB <- harb
ann_data$W_LAND <- land
ann_data$W_COHE <- cohe
## INSERT DATA INTO THE WARN TABLE
# sqldf("insert into warn select * from ann_data", dbname = vms_db_path)
dbWriteTable(conn, name="warn", value = ann_data, append=T,row.names=FALSE)
}
}
cat("\n\n   ---   End Ping Cleaning   ---\n", sep = "")
tot_p <- 100 / dbGetQuery(conn,"select count(*) from warn")[1, ]
no_p1 <- dbGetQuery(conn,"select count(*) from warn where W_DUPL = 1")[1, ]
no_p2 <- dbGetQuery(conn,"select count(*) from warn where W_HARB = 1")[1, ]
no_p3 <- dbGetQuery(conn,"select count(*) from warn where W_LAND = 1")[1, ]
no_p4 <- dbGetQuery(conn,"select count(*) from warn where W_COHE = 0")[1, ]
cat("\n - Found ", no_p1, " (", round(tot_p * no_p1, 2), "% of total)", " duplicated pings!", sep = "")
cat("\n - Found ", no_p2, " (", round(tot_p * no_p2, 2), "% of total)", " pings in harbour!", sep = "")
cat("\n - Found ", no_p3, " (", round(tot_p * no_p3, 2), "% of total)", " pings on land!", sep = "")
cat("\n - Found ", no_p4, " (", round(tot_p * no_p4, 2), "% of total)", " not coherent pings!\n\n", sep = "")
library(rmv)
vms_clean_db(vms_db_path = "data/vms_vms.sqlite",map_file_path = "data/maps/CarteMar/tcote_maroc.shp",harb_file_path = "data/maps/PortsSites/ports_sites_Project.shp",inHarbBuff = 5)
